---
title: "Lab 2: Introduction to R and RStudio"
Author: "Quinn Asena and Jack Williams"
date: "August 8, 2022"
format:
  html:
    code-fold: false
    toc: true
theme:
  light: flatly
  dark: darkly
---

# Introduction

This lab is designed to introduce you to R and RStudio, which we will use for all future computer labs. R is a high-level scientific scripting (programming) language for analyzing and visualizing data. RStudio provides a useful front-end visual interface for writing R code and viewing results. “High-level” here means that the grammar of the R programming language is designed to be reasonably intuitive to humans, as opposed to other programming languages that are optimized to be machine-readable. R is part of a whole family of high-level programming languages – Python and Matlab are also very popular, plus ArcGIS, JavaScript, etc., etc. When learning any of these languages, the rule of thumb is that the first one takes the most time to learn, but after that, the next one is relatively easy to learn, because they all follow similar conventions. Knowing one or more of these languages is a foundational skill in the fast-growing field of the data sciences.

## Before the lab

Download R and RStudio and [familiarise yourself with the layout](https://environmentalcomputing.net/getting-started-with-r/installing-r-rstudio/).

1. Download R: [Windows](https://cran.r-project.org/bin/windows/base/); [Mac](https://cran.r-project.org/bin/macosx/).

2. [Download RStudio Desktop](https://www.rstudio.com/products/rstudio/download/).

RStudio is an integrated development environment (IDE) for R and runs R under the hood (you will need both installed). There are other options available but we will stick with RStudio.

## Getting help in Geog523

R is hard, we know, and we can't teach it all in one lab. Take advantage of the out-of-class resources including the slack channel and office-hours. _We are here to support you through the learning curve_. While coursework should be completed independently we also encourage students to help each other out.

This workbook is intended to provide you with some basics skills, but primarily to direct you to relevant resources. Links will be provided along the way and in @sec-resources are resources (some of which this lab is based on) that include everything needed for this module. 

When posting in the Geog523 slack channel:

- Make sure you have looked through the resources and tried to solve the problem yourself.

- Ask a clear question copying the line of code causing an error as well as the error message.

Best practice for asking questions is to create a ['reprex'](https://stackoverflow.com/help/minimal-reproducible-example). Often you will solve your own question by working it through.


# R basics

Buckle up, here we go! We will have regular check-ins during the lab to make sure everyone is keeping up. If you are struggling, put a red sticky on the top of your screen, if all is good, put the green sticky on your screen.

## Projects and Working Directories

It is important to structure projects carefully so that data and scripts are stored in the same location. Usually a project's structure will have a high level directory that contains several sub-directories for data and outputs. For example you might want to create a course directory called '2022-Geog523', a directory within that for this lab called '02-intro-to-r', and two sub-directories within that named 'data' and 'outputs' respectively that we will use later. 

:::{.callout-note}
## Reference resource
[Projects and working directories](https://environmentalcomputing.net/getting-started-with-r/project-management/).
:::

**IMAGE OF DIRECTORY STRUCTURE HERE**

- 2022-Geog523
  - 02-intro-to-r
    - data
    - outputs

Future labs will be set up following a similar structure.

:::{.callout-caution}
## Exercise
1. Create the described directory structure above

2. Open up RStudio click 'File' -> 'New Project' -> 'Existing Directory'. Navigate to the directory you created called 02-intro-to-r and hit Create Project.
:::


## Maths and operations

Fundamentally, R does maths. R supports mathematical operators:

```{r operators}

2 + 3

(2 + 3) * 7

pi / 4 # note that 'pi' is built into R.
```

:::{.callout-caution}
## Exercise

1. Click 'file' -> 'New File' -> 'R Script'.

2. Using mathematical operators, try subtract your age from the current year.

3. Type the calculation into your R script, and use control + enter to run the line of code.

4. Save your R script to the high level directory you created earlier called 02-intro-to-r.
:::



## Objects and assignment

Typically we work with 'objects' in R. An object can be a value, word, data, matrix, or any acceptable type in R (more on types later). Objects are stored in the 'environment' (by default, the top right panel) in RStudio. To create an object we use the 'assignment'operaror (`<-`). 

:::{.callout-note}
## Reference resource
[Objects and assignment](https://datacarpentry.org/R-genomics/01-intro-to-R.html#creating_objects).
:::


```{r objects}

# Assign a value of 3 to an object called 'radious'.
radius <- 3
# See it appear in your 'working environment'?

# Assign a value to an object called 'area'.
area <- pi * radius^2
# the assigned value is the result of the calculation on the right hand side of the assignment operator (<-).

```

These lines of code first, assign a value of 3 to an object called 'radius' and then assign the result of a calculation (using the object radius) to a second object called 'area'. `pi` is predefined in R; thus, does not need to be assigned to an object.

Note that assignment does not print the result. To do so we can 'call' the object by running it (control enter).

```{r objectcall}

# By running the name of an object it will 'print' the output to the console.
radius

area

```

:::{.callout-caution}
## Exercise

1. assign your age to an object called `my_age`

2. assign the current year to an object called `year`

3. subtract the two objects from each other and see if you get the right result.

*Note object names cannot have spaces or begin with numbers. Use snake_case or CamelCase*
:::

## Comments

When writing code it is best practice to include comments. When  you look back at your code in a week or two it can be difficult to understand why you did what you did. In R, anything following a '`#`' is a comment and will not be executed as code. See in the code chunks above there are comments to help describe what is going on?

## Functions and help

There are many functions built into R to make life easier. Functions are easy to recognise because most are a function name followed by parentheses, e.g., `sqrt()`. Requirements of the function inside the parentheses are called 'arguments'. A function takes an input (or several) and produces an output. For example:

```{r functions}
# Take the square root of the number 16.
sqrt(16) # '16' is the input provided to the function sqrt.
sqrt(radius) # Take the square root of the object defined earlier.
round(area) # Round up the result of area.
```

:::{.callout-note}
## Reference resource
[Using functions](https://datacarpentry.org/R-genomics/01-intro-to-R.html#functions) for more detail.
:::

Note that we are performing calculations on the object but not overwriting it. The objects radius and area still retain their original values. We could overwrite the object like this:

```{r functions2}
radius <- sqrt(radius) # run the object radius again to see the new value.
# or create a new one like this:
area_round <- round(area)
```

Functions can be simple (like the examples above), or designed to complete sophisticated analyses. To find out more about a function you can bring up the help using the `?` followed by the function name:

```{r help, message=FALSE, warning=FALSE, results=FALSE}
?round
```

See the help for the function `round` tells you the details? If you scroll down to Arguments section you will see it has a second argument called digits. You will also see examples of how to use the function.

:::{.callout-caution}
## Exercise

- See if you can use the `round()` function and the `digits` argument to round the `radius` object to different numbers of decimal places.
:::

## Packages

R has a set of functions built in like the examples above but often we need more that come from downloading packages. A package is a collection of functions. Packages are often specialized to complete particular tasks and analyses. A lot of learning R is figuring out the functions you need.

To install a package we use the function `install.packages()` and put the name of the package in quotation marks:

```{r install, message=FALSE, warning=FALSE, results=FALSE}
# We will use the analogue package later in the course.
install.packages("analogue", repos='http://cran.us.r-project.org')
```

To access the set of functions in a package we have to tell R to load them using the `library()` function:

```{r libraray, message=FALSE, warning=FALSE, results=FALSE}
library(analogue)
```

Now R knows we want to access functions from the analogue package. More on this later in the course.

## Data types and structures

Data types and structures are important concepts in R. The objects we worked with, `radius` and `area`, were both type double (decimal). Other types include: characters (also called strings), integers, and logial.

:::{.callout-note}
## Reference resource
[Types and structures](https://environmentalcomputing.net/getting-started-with-r/data-types-structure/).
:::

```{r types}
char <- "this is a string" # String is indicated by ""
int <- 42L # Integers are indicated by the 'L'
doub <- 1.61803 # Double (can also be single digits)
logic <- TRUE # Logical types are TRUE or FALSE (case sensitie)
```

To find the type of an object use the function `class()`. Data structures are organised sets of values. The most fundamental are:

- Vectors: one dimentional structures of a single type

- Matrices: two dimensional structures of a single type

- Data frames: two dimentional structures of mixed types

The `radius` and `area` objects are vector objects of length 1. Other structures exists such as lists and arrays which we will leave alone for now.

The function `c()` concatenates (sticks together) multiple values that must be of the same type into a vector.

```{r vectors}
# Create a vector of type double
doub_vec <- c(1.87, 5, 42, 10.0)
# Create a factor vector, a special type of vector indicating categories.
factor_vec <- factor(c("small", "medium", "large", "large")) 
int_vec <- c(1L, 2L, 3L, 4L) # 'L' indicates an integer.
```

The `matrix()` function creates a two dimentional matrix that must also be of the same type.

```{r matrices}
a <- c(1:10) # vector of numbers from 1 to 10.
A <- matrix(a, nrow = 5, ncol = 2) # Converts 'a' into a 5x2 matrix names 'A'.
A
```

The `data.frame()` function can combine the vectors into a data frame. 

```{r dfs}
data_mixed <- data.frame(factor_vec, doub_vec, int_vec)
data_mixed
```

## Saving and loading data

Let's now save the data frame we created to our data directory. The base R functions for saving and loading data as a .csv file are `write.csv()` and `read.csv()`.

The `write.csv()` function requires arguments of: the object you want to save; and where you want to save it. If you forget, remember to look in the help `?write.csv`.

```{r saving}
# The first argument provided is the object we want to save
# The second argument 'path = ' has two parts:
# The directory to save the object to: 'data'
# The file name and extnesion: 'data_mixed.csv'
# note they are separated with a '/'
write.csv(data_mixed, file = "data/data_mixed.csv")

```

To load the data back into R we would use the `read.csv()` function. We will use this later in the course.

# Homework

If you are unfamiliar with R, go through this workbook again and link through to the reference resources provided along the way. Each link points to a useful recourse for each topic (assignment, objects, and data structures) that go into more detail.

# Resources {#sec-resources}

- [Environmental Computing](https://environmentalcomputing.net/about-this-site/)

- [The R Guide, W. J. Owen](https://cran.r-project.org/doc/contrib/Owen-TheRGuide.pdf)

- [Data and Software carpentry](https://carpentries.org/workshops-curricula/)

- [https://bookdown.org/](Free books on R)
  - In-depth resources, see: Hands-On Programming with R

- [stackoverflow](https://stackoverflow.com/)
  - I recommend only browsing stackoverflow at this stage. The community does not like duplicated questions.

# Notes

- [ ] More time on working directories

- [ ] Less on single values, go to vectors
